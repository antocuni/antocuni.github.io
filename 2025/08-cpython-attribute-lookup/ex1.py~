import sys

def pp(what, d):
    "Pretty print a dictionary, excluding the __dunder__ keys"
    d2 = {k: v for (k, v) in d.items() if not k.startswith('__')}
    print(f'{what} = {d2}')

# which example to run?
if len(sys.argv) > 1:
    what = sys.argv[1]
else:
    what = 'example1'


if what == 'example1':
    class C1:
        x = 1
        y = 2

    class C2(C1):
        y = 3
        z = 4

    obj = C2()
    obj.z = 5

    print(f'{obj.x = }')
    print(f'{obj.y = }')
    print(f'{obj.z = }')
    pp('obj.__dict__', obj.__dict__)
    pp('C2.__dict__', C2.__dict__)
    pp('C1.__dict__', C1.__dict__)

    print(f'{C2.x = }')
    print(f'{C2.y = }')
    print(f'{C2.z = }')


if what == 'example2':

    class C1:
        x = 1

        @property
        def y(self):
            return 2

        def meth(self):
            pass

    obj = C1()
    obj.x = 3

    print(f'{obj.x = }')
    print(f'{obj.y = }')
    print(f'{obj.meth = }')
    print()
    print(f'{C1.x = }')
    print(f'{C1.y = }')
    print(f'{C1.meth = }')
    print()
    pp('obj.__dict__', obj.__dict__)
    pp('C1.__dict__', C1.__dict__)
    print()

    obj_y = C1.y.__get__(obj, C1)
    obj_meth = C1.meth.__get__(obj, C1)
    print(f'{obj_y = }')
    print(f'{obj_meth = }')
    print()

    obj.meth = 'hello'
    print(f'{obj.meth = }')
    pp('obj.__dict__', obj.__dict__)
    print()

    # the following raises AttributeError
    #obj.y = 'hello'

    obj.__dict__['y'] = 'hello'
    print(f'{obj.y = }')
    pp('obj.__dict__', obj.__dict__)


if what == 'example3':

    def func():
        pass

    @property
    def prop(self):
        pass

    print('func.__get__?', hasattr(func, '__get__'))
    print('func.__set__?', hasattr(func, '__set__'))
    print('prop.__get__?', hasattr(prop, '__get__'))
    print('prop.__set__?', hasattr(prop, '__set__'))
